name: Infra - IAM & Lambda

on:
  push:
    branches: [main, suhyun]
    paths:
      - "pipeline/Infra/iam/**"
      - "pipeline/Infra/lambda/**"
      - "pipeline/Infra/attach_sm_invoke_lambda.tf"
      - "pipeline/Infra/main.tf"
  workflow_dispatch:
    inputs:
      environment:
        description: "환경(dev/prod 등)"
        required: false
        default: "dev"
  workflow_call:
    inputs:
      environment:
        required: false
        type: string
        default: "dev"

concurrency:
  group: pipeline-${{ inputs.environment }}
  cancel-in-progress: true

jobs:
  apply-iam-lambda:
    runs-on: ubuntu-latest
    permissions: {id-token: write, contents: read}
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with: 
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Init
        working-directory: pipeline/Infra
        run: |
          terraform init -input=false -reconfigure -backend-config="${{ github.workspace }}/.github/terraform/backend.hcl"
      - name: Select workspace
        working-directory: pipeline/Infra
        run: |
          terraform workspace select "${{ inputs.environment }}" \
            || terraform workspace new "${{ inputs.environment }}"
      - name: Force-unlock stale lock if exists (auto)
        working-directory: pipeline/Infra
        env: 
          TFSTATE_BUCKET: ${{ vars.TFSTATE_BUCKET }}
          TF_LOCK_TABLE:  ${{ vars.TF_LOCK_TABLE }}         
          WS:             ${{ inputs.environment || 'dev' }}
        run: |
          set -Eeuo pipefail
          PREFIX="sm-infra"
          KEY_PATH="${PREFIX}/${WS}/infra.tfstate"
          LOCK_ID="${TFSTATE_BUCKET}/${KEY_PATH}"

          echo "Looking for lock: table=${TF_LOCK_TABLE}, LockID=${LOCK_ID}"
          
          ITEM_JSON="$(aws dynamodb get-item \
            --table-name "${TF_LOCK_TABLE}" \
            --key "{\"LockID\":{\"S\":\"${LOCK_ID}\"}}" \
            --output json || true)"

          # Lock 메타에 들어 있는 ID 추출 (없으면 빈 문자열)
          ID="$(echo "${ITEM_JSON}" | jq -r '.Item.Info.S? | fromjson? | .ID // empty')"

          if [ -n "${ID}" ]; then
            echo "Found stale lock ID=${ID} → force-unlock"
            terraform force-unlock -force "${ID}" || true
          else
            echo "No active lock found for ${LOCK_ID}"
          fi
      
      - name: Apply IAM & Lambda modules only
        working-directory: pipeline/Infra
        run: |
          set -Eeuo pipefail
          terraform apply -auto-approve \
            -target=module.iam \
            -target=module.lambda
      - name: Read Terraform outputs (role & lambda)
        working-directory: pipeline/Infra
        run: |
          set -Eeuo pipefail
          echo "SAGEMAKER_JOB_ROLE=$(terraform output -raw sagemaker_job_role_arn)" >> "$GITHUB_ENV"
          echo "GET_PREV_AUC_LAMBDA_ARN=$(terraform output -raw get_previous_auc_lambda_arn)" >> "$GITHUB_ENV"

